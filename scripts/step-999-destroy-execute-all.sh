#!/bin/bash
# step-999-destroy-execute-all.sh - Execute the destruction plan\n\nset -e\n\n# Source configuration\nif [ -f ".env" ]; then\n    source .env\nfi\n\n# Colors for output\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nBLUE='\\033[0;34m'\nCYAN='\\033[0;36m'\nNC='\\033[0m'\n\necho -e "${RED}=======================================${NC}"\necho -e "${RED}üí• RESOURCE DESTRUCTION EXECUTION${NC}"\necho -e "${RED}=======================================${NC}"\necho -e "${RED}‚ö†Ô∏è  WARNING: THIS WILL PERMANENTLY DELETE RESOURCES!${NC}"\necho -e "${RED}=======================================${NC}"\n\nREGION=${AWS_REGION:-us-east-2}\nDESTRUCTION_PLAN="/tmp/destruction-plan.json"\nDESTRUCTION_LOG="/tmp/destruction-execution.log"\n\n# Check if destruction plan exists\nif [ ! -f "$DESTRUCTION_PLAN" ]; then\n    echo -e "${RED}‚ùå Destruction plan not found: $DESTRUCTION_PLAN${NC}"\n    echo "Run ./step-990-destroy-validation.sh first"\n    exit 1\nfi\n\n# Initialize log\necho "Destruction execution started at $(date)" > "$DESTRUCTION_LOG"\n\n# Show summary from validation\necho -e "${CYAN}üìä Resources to be destroyed:${NC}"\necho ""\n\nexisting_instances=$(jq '.existing_resources.instances | length' "$DESTRUCTION_PLAN")\nexisting_lambdas=$(jq '.existing_resources.lambda_functions | length' "$DESTRUCTION_PLAN")\nexisting_buckets=$(jq '.existing_resources.s3_buckets | length' "$DESTRUCTION_PLAN")\nexisting_queues=$(jq '.existing_resources.sqs_queues | length' "$DESTRUCTION_PLAN")\nexisting_ecr=$(jq '.existing_resources.ecr_repositories | length' "$DESTRUCTION_PLAN")\nexisting_iam=$(jq '.existing_resources.iam_resources | length' "$DESTRUCTION_PLAN")\nexisting_sg=$(jq '.existing_resources.security_groups | length' "$DESTRUCTION_PLAN")\nexisting_keys=$(jq '.existing_resources.key_pairs | length' "$DESTRUCTION_PLAN")\n\necho "  üñ•Ô∏è  EC2 Instances: $existing_instances"\necho "  Œª  Lambda Functions: $existing_lambdas"\necho "  ü™£ S3 Buckets: $existing_buckets"\necho "  üì¨ SQS Queues: $existing_queues"\necho "  üê≥ ECR Repositories: $existing_ecr"\necho "  üîê IAM Resources: $existing_iam"\necho "  üõ°Ô∏è  Security Groups: $existing_sg"\necho "  üîë Key Pairs: $existing_keys"\n\ntotal_resources=$((existing_instances + existing_lambdas + existing_buckets + existing_queues + existing_ecr + existing_iam + existing_sg + existing_keys))\n\necho ""\necho -e "${CYAN}Total resources to destroy: $total_resources${NC}"\n\nif [ "$total_resources" -eq 0 ]; then\n    echo -e "${GREEN}‚úÖ No resources found to destroy${NC}"\n    echo "Your AWS resources are already clean"\n    exit 0\nfi\n\n# Show cost savings\nhourly_savings=$(jq '.cost_analysis.estimated_hourly_cost' "$DESTRUCTION_PLAN")\ndaily_savings=$(jq '.cost_analysis.estimated_daily_cost' "$DESTRUCTION_PLAN")\nmonthly_savings=$(jq '.cost_analysis.estimated_monthly_cost' "$DESTRUCTION_PLAN")\n\necho ""\necho -e "${GREEN}üí∞ Cost savings after destruction:${NC}"\nprintf "  Per hour: \\$%.2f\\n" "$hourly_savings"\nprintf "  Per day: \\$%.2f\\n" "$daily_savings"\nprintf "  Per month: \\$%.2f\\n" "$monthly_savings"\n\n# Show warnings\nwarning_count=$(jq '.warnings | length' "$DESTRUCTION_PLAN")\nif [ "$warning_count" -gt 0 ]; then\n    echo ""\n    echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANT WARNINGS:${NC}"\n    jq -r '.warnings[]' "$DESTRUCTION_PLAN" | sed 's/^/  ‚Ä¢ /'\nfi\n\necho ""\necho -e "${RED}üö® FINAL WARNING üö®${NC}"\necho -e "${RED}This action cannot be undone!${NC}"\necho -e "${RED}All selected resources will be permanently destroyed!${NC}"\necho ""\n\n# Triple confirmation\nread -p "Type 'DELETE' to confirm you want to destroy all resources: " confirm1\n\nif [ "$confirm1" != "DELETE" ]; then\n    echo "Destruction cancelled"\n    exit 0\nfi\n\necho ""\nread -p "Are you absolutely sure? This will delete everything! (yes/no): " confirm2\n\nif [ "$confirm2" != "yes" ]; then\n    echo "Destruction cancelled"\n    exit 0\nfi\n\necho ""\nread -p "Last chance - proceed with destruction? (DESTROY/cancel): " confirm3\n\nif [ "$confirm3" != "DESTROY" ]; then\n    echo "Destruction cancelled - your resources are safe"\n    exit 0\nfi\n\necho ""\necho -e "${YELLOW}üí• Beginning resource destruction...${NC}"\necho ""\n\n# Destruction functions\ndestroy_instances() {\n    echo -e "${YELLOW}üñ•Ô∏è  Destroying EC2 instances...${NC}"\n    \n    instance_ids=$(jq -r '.existing_resources.instances[].id' "$DESTRUCTION_PLAN")\n    \n    if [ -n "$instance_ids" ] && [ "$instance_ids" != "null" ]; then\n        for instance_id in $instance_ids; do\n            echo "  Terminating $instance_id..."\n            \n            aws ec2 terminate-instances --instance-ids "$instance_id" --region "$REGION" >> "$DESTRUCTION_LOG" 2>&1 || {\n                echo -e "    ${RED}‚ùå Failed to terminate $instance_id${NC}"\n                echo "Failed to terminate $instance_id" >> "$DESTRUCTION_LOG"\n                continue\n            }\n            \n            echo -e "    ${GREEN}‚úÖ Termination initiated${NC}"\n        done\n        \n        echo "  Waiting for instances to terminate..."\n        aws ec2 wait instance-terminated --instance-ids $instance_ids --region "$REGION" 2>/dev/null || {\n            echo -e "    ${YELLOW}‚ö†Ô∏è  Timeout waiting for termination (instances may still be terminating)${NC}"\n        }\n    else\n        echo "  No instances to destroy"\n    fi\n    \n    echo ""\n}\n\ndestroy_lambda_functions() {\n    echo -e "${YELLOW}Œª  Destroying Lambda functions...${NC}"\n    \n    function_names=$(jq -r '.existing_resources.lambda_functions[].name' "$DESTRUCTION_PLAN")\n    \n    if [ -n "$function_names" ] && [ "$function_names" != "null" ]; then\n        for function_name in $function_names; do\n            echo "  Deleting $function_name..."\n            \n            aws lambda delete-function --function-name "$function_name" --region "$REGION" >> "$DESTRUCTION_LOG" 2>&1 || {\n                echo -e "    ${RED}‚ùå Failed to delete $function_name${NC}"\n                echo "Failed to delete function $function_name" >> "$DESTRUCTION_LOG"\n                continue\n            }\n            \n            echo -e "    ${GREEN}‚úÖ Deleted${NC}"\n        done\n    else\n        echo "  No Lambda functions to destroy"\n    fi\n    \n    echo ""\n}\n\ndestroy_sqs_queues() {\n    echo -e "${YELLOW}üì¨ Destroying SQS queues...${NC}"\n    \n    queue_urls=$(jq -r '.existing_resources.sqs_queues[].url' "$DESTRUCTION_PLAN")\n    \n    if [ -n "$queue_urls" ] && [ "$queue_urls" != "null" ]; then\n        for queue_url in $queue_urls; do\n            echo "  Deleting $(basename "$queue_url")..."\n            \n            aws sqs delete-queue --queue-url "$queue_url" --region "$REGION" >> "$DESTRUCTION_LOG" 2>&1 || {\n                echo -e "    ${RED}‚ùå Failed to delete queue${NC}"\n                echo "Failed to delete queue $queue_url" >> "$DESTRUCTION_LOG"\n                continue\n            }\n            \n            echo -e "    ${GREEN}‚úÖ Deleted${NC}"\n        done\n    else\n        echo "  No SQS queues to destroy"\n    fi\n    \n    echo ""\n}\n\ndestroy_s3_buckets() {\n    echo -e "${YELLOW}ü™£ Destroying S3 buckets...${NC}"\n    echo -e "${RED}‚ö†Ô∏è  This will permanently delete all data in the buckets!${NC}"\n    \n    bucket_names=$(jq -r '.existing_resources.s3_buckets[].name' "$DESTRUCTION_PLAN")\n    \n    if [ -n "$bucket_names" ] && [ "$bucket_names" != "null" ]; then\n        for bucket_name in $bucket_names; do\n            echo "  Emptying and deleting $bucket_name..."\n            \n            # Empty bucket first\n            echo "    Emptying bucket..."\n            aws s3 rm "s3://$bucket_name" --recursive >> "$DESTRUCTION_LOG" 2>&1 || {\n                echo -e "    ${YELLOW}‚ö†Ô∏è  Warning: Could not empty bucket completely${NC}"\n            }\n            \n            # Delete bucket\n            echo "    Deleting bucket..."\n            aws s3api delete-bucket --bucket "$bucket_name" --region "$REGION" >> "$DESTRUCTION_LOG" 2>&1 || {\n                echo -e "    ${RED}‚ùå Failed to delete bucket $bucket_name${NC}"\n                echo "Failed to delete bucket $bucket_name" >> "$DESTRUCTION_LOG"\n                continue\n            }\n            \n            echo -e "    ${GREEN}‚úÖ Bucket deleted${NC}"\n        done\n    else\n        echo "  No S3 buckets to destroy"\n    fi\n    \n    echo ""\n}\n\ndestroy_ecr_repositories() {\n    echo -e "${YELLOW}üê≥ Destroying ECR repositories...${NC}"\n    \n    # ECR destruction logic would go here\n    echo "  ECR destruction not yet implemented"\n    echo ""\n}\n\ndestroy_iam_resources() {\n    echo -e "${YELLOW}üîê Destroying IAM resources...${NC}"\n    \n    # IAM destruction logic would go here  \n    echo "  IAM destruction not yet implemented"\n    echo "  (Manual cleanup recommended for safety)"\n    echo ""\n}\n\ndestroy_security_groups() {\n    echo -e "${YELLOW}üõ°Ô∏è  Destroying security groups...${NC}"\n    \n    # Security group destruction logic would go here\n    echo "  Security group destruction not yet implemented"\n    echo ""\n}\n\ndestroy_key_pairs() {\n    echo -e "${YELLOW}üîë Destroying key pairs...${NC}"\n    \n    # Key pair destruction logic would go here\n    echo "  Key pair destruction not yet implemented"\n    echo ""\n}\n\n# Execute destruction in safe order\necho -e "${BLUE}Executing destruction plan...${NC}"\necho ""\n\n# Follow the destruction order from the plan\ndestroy_instances\ndestroy_lambda_functions\ndestroy_sqs_queues\ndestroy_s3_buckets\ndestroy_ecr_repositories\ndestroy_iam_resources\ndestroy_security_groups\ndestroy_key_pairs\n\n# Clean up .env files\necho -e "${YELLOW}üßπ Cleaning up configuration files...${NC}"\n\n# Ask about .env file cleanup\nread -p "Remove .env files to complete cleanup? (y/N): " cleanup_env\n\nif [[ "$cleanup_env" =~ ^[Yy]$ ]]; then\n    find /home/ubuntu/event-b -name ".env" -type f | while read -r env_file; do\n        echo "  Removing $env_file..."\n        rm -f "$env_file"\n    done\n    echo -e "${GREEN}  ‚úÖ Configuration files removed${NC}"\nelse\n    echo "  Configuration files preserved"\nfi\n\necho ""\n\n# Final verification\necho -e "${CYAN}üîç Verifying destruction...${NC}"\n\n# Re-run validation to check what's left\nremaining_instances=$(aws ec2 describe-instances \\\n    --filters "Name=tag:Type,Values=fast-api-worker,gpu-worker,production-worker" \\\n              "Name=instance-state-name,Values=running,stopped,pending,stopping" \\\n    --region "$REGION" \\\n    --query 'Reservations[*].Instances[*].InstanceId' \\\n    --output text 2>/dev/null | wc -w)\n\necho "  Remaining instances: $remaining_instances"\n\nif [ "$remaining_instances" -eq 0 ]; then\n    echo -e "${GREEN}‚úÖ All instances destroyed${NC}"\nelse\n    echo -e "${YELLOW}‚ö†Ô∏è  Some instances may still be terminating${NC}"\nfi\n\n# Summary\necho ""\necho -e "${BLUE}=======================================${NC}"\necho -e "${BLUE}üí• DESTRUCTION COMPLETE${NC}"\necho -e "${BLUE}=======================================${NC}"\necho ""\necho -e "${GREEN}‚úÖ Resource destruction executed${NC}"\nprintf "üí∞ Estimated cost savings: \\$%.2f/hour\\n" "$hourly_savings"\necho ""\necho -e "${CYAN}üìã What was destroyed:${NC}"\necho "  ‚Ä¢ EC2 instances terminated"\necho "  ‚Ä¢ Lambda functions deleted"\necho "  ‚Ä¢ SQS queues deleted"\necho "  ‚Ä¢ S3 buckets emptied and deleted"\necho "  ‚Ä¢ Configuration files cleaned (if selected)"\necho ""\necho -e "${YELLOW}üìù Destruction log saved to: $DESTRUCTION_LOG${NC}"\necho ""\necho -e "${GREEN}üéâ All done! Your AWS resources have been cleaned up.${NC}"\necho -e "${BLUE}=======================================${NC}"

# Mark as completed and show next step
create_checkpoint "$SCRIPT_NAME" "completed" "$SCRIPT_NAME" 2>/dev/null || true
log_info "Resource Destruction completed" "$SCRIPT_NAME" 2>/dev/null || echo "‚úÖ Resource Destruction completed"

# Show next step
if declare -f show_next_step > /dev/null; then
    show_next_step "$(basename "$0")" "$(dirname "$0")"
else
    echo -e "${GREEN}All resources destroyed. To redeploy, run step-000-setup-configuration.sh${NC}"
fi
